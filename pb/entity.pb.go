// Code generated by protoc-gen-go. DO NOT EDIT.
// source: entity.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	entity.proto

It has these top-level messages:
	GetAllEntitiesRequest
	GetEntityRequest
	GetEntityResponse
	PutEntityRequest
	PutEntityResponse
	PostEntityRequest
	PostEntityResponse
	DeleteEntityRequest
	DeleteEntityResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetAllEntitiesRequest struct {
}

func (m *GetAllEntitiesRequest) Reset()                    { *m = GetAllEntitiesRequest{} }
func (m *GetAllEntitiesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllEntitiesRequest) ProtoMessage()               {}
func (*GetAllEntitiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetEntityRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetEntityRequest) Reset()                    { *m = GetEntityRequest{} }
func (m *GetEntityRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEntityRequest) ProtoMessage()               {}
func (*GetEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetEntityRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetEntityResponse struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Action string `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
}

func (m *GetEntityResponse) Reset()                    { *m = GetEntityResponse{} }
func (m *GetEntityResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEntityResponse) ProtoMessage()               {}
func (*GetEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetEntityResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetEntityResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetEntityResponse) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type PutEntityRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Action string `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
}

func (m *PutEntityRequest) Reset()                    { *m = PutEntityRequest{} }
func (m *PutEntityRequest) String() string            { return proto.CompactTextString(m) }
func (*PutEntityRequest) ProtoMessage()               {}
func (*PutEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PutEntityRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PutEntityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PutEntityRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type PutEntityResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *PutEntityResponse) Reset()                    { *m = PutEntityResponse{} }
func (m *PutEntityResponse) String() string            { return proto.CompactTextString(m) }
func (*PutEntityResponse) ProtoMessage()               {}
func (*PutEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PutEntityResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PostEntityRequest struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Action string `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
}

func (m *PostEntityRequest) Reset()                    { *m = PostEntityRequest{} }
func (m *PostEntityRequest) String() string            { return proto.CompactTextString(m) }
func (*PostEntityRequest) ProtoMessage()               {}
func (*PostEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PostEntityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PostEntityRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type PostEntityResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *PostEntityResponse) Reset()                    { *m = PostEntityResponse{} }
func (m *PostEntityResponse) String() string            { return proto.CompactTextString(m) }
func (*PostEntityResponse) ProtoMessage()               {}
func (*PostEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PostEntityResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteEntityRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteEntityRequest) Reset()                    { *m = DeleteEntityRequest{} }
func (m *DeleteEntityRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteEntityRequest) ProtoMessage()               {}
func (*DeleteEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteEntityRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteEntityResponse struct {
}

func (m *DeleteEntityResponse) Reset()                    { *m = DeleteEntityResponse{} }
func (m *DeleteEntityResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteEntityResponse) ProtoMessage()               {}
func (*DeleteEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*GetAllEntitiesRequest)(nil), "pb.GetAllEntitiesRequest")
	proto.RegisterType((*GetEntityRequest)(nil), "pb.GetEntityRequest")
	proto.RegisterType((*GetEntityResponse)(nil), "pb.GetEntityResponse")
	proto.RegisterType((*PutEntityRequest)(nil), "pb.PutEntityRequest")
	proto.RegisterType((*PutEntityResponse)(nil), "pb.PutEntityResponse")
	proto.RegisterType((*PostEntityRequest)(nil), "pb.PostEntityRequest")
	proto.RegisterType((*PostEntityResponse)(nil), "pb.PostEntityResponse")
	proto.RegisterType((*DeleteEntityRequest)(nil), "pb.DeleteEntityRequest")
	proto.RegisterType((*DeleteEntityResponse)(nil), "pb.DeleteEntityResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Entity service

type EntityClient interface {
	GetAllEntities(ctx context.Context, in *GetAllEntitiesRequest, opts ...grpc.CallOption) (Entity_GetAllEntitiesClient, error)
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	PutEntity(ctx context.Context, in *PutEntityRequest, opts ...grpc.CallOption) (*PutEntityResponse, error)
	PostEntity(ctx context.Context, in *PostEntityRequest, opts ...grpc.CallOption) (*PostEntityResponse, error)
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error)
}

type entityClient struct {
	cc *grpc.ClientConn
}

func NewEntityClient(cc *grpc.ClientConn) EntityClient {
	return &entityClient{cc}
}

func (c *entityClient) GetAllEntities(ctx context.Context, in *GetAllEntitiesRequest, opts ...grpc.CallOption) (Entity_GetAllEntitiesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Entity_serviceDesc.Streams[0], c.cc, "/pb.Entity/GetAllEntities", opts...)
	if err != nil {
		return nil, err
	}
	x := &entityGetAllEntitiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Entity_GetAllEntitiesClient interface {
	Recv() (*GetEntityResponse, error)
	grpc.ClientStream
}

type entityGetAllEntitiesClient struct {
	grpc.ClientStream
}

func (x *entityGetAllEntitiesClient) Recv() (*GetEntityResponse, error) {
	m := new(GetEntityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *entityClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	out := new(GetEntityResponse)
	err := grpc.Invoke(ctx, "/pb.Entity/GetEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) PutEntity(ctx context.Context, in *PutEntityRequest, opts ...grpc.CallOption) (*PutEntityResponse, error) {
	out := new(PutEntityResponse)
	err := grpc.Invoke(ctx, "/pb.Entity/PutEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) PostEntity(ctx context.Context, in *PostEntityRequest, opts ...grpc.CallOption) (*PostEntityResponse, error) {
	out := new(PostEntityResponse)
	err := grpc.Invoke(ctx, "/pb.Entity/PostEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error) {
	out := new(DeleteEntityResponse)
	err := grpc.Invoke(ctx, "/pb.Entity/DeleteEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Entity service

type EntityServer interface {
	GetAllEntities(*GetAllEntitiesRequest, Entity_GetAllEntitiesServer) error
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	PutEntity(context.Context, *PutEntityRequest) (*PutEntityResponse, error)
	PostEntity(context.Context, *PostEntityRequest) (*PostEntityResponse, error)
	DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityResponse, error)
}

func RegisterEntityServer(s *grpc.Server, srv EntityServer) {
	s.RegisterService(&_Entity_serviceDesc, srv)
}

func _Entity_GetAllEntities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllEntitiesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EntityServer).GetAllEntities(m, &entityGetAllEntitiesServer{stream})
}

type Entity_GetAllEntitiesServer interface {
	Send(*GetEntityResponse) error
	grpc.ServerStream
}

type entityGetAllEntitiesServer struct {
	grpc.ServerStream
}

func (x *entityGetAllEntitiesServer) Send(m *GetEntityResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Entity_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Entity/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_PutEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).PutEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Entity/PutEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).PutEntity(ctx, req.(*PutEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_PostEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).PostEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Entity/PostEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).PostEntity(ctx, req.(*PostEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Entity/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Entity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Entity",
	HandlerType: (*EntityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntity",
			Handler:    _Entity_GetEntity_Handler,
		},
		{
			MethodName: "PutEntity",
			Handler:    _Entity_PutEntity_Handler,
		},
		{
			MethodName: "PostEntity",
			Handler:    _Entity_PostEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _Entity_DeleteEntity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllEntities",
			Handler:       _Entity_GetAllEntities_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "entity.proto",
}

func init() { proto.RegisterFile("entity.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0xa6, 0x71, 0x14, 0xf6, 0x18, 0x63, 0x7d, 0x6e, 0x5d, 0xed, 0x49, 0xa2, 0x82, 0xa7, 0x2a,
	0x7a, 0x11, 0x3c, 0xc8, 0x64, 0xb2, 0x9b, 0x8e, 0x1d, 0xbd, 0xad, 0xee, 0x1d, 0x0a, 0xb5, 0x89,
	0x26, 0x3b, 0xec, 0xdf, 0xf3, 0x2f, 0x93, 0x26, 0x75, 0xb6, 0x59, 0x2d, 0x78, 0x4b, 0xbe, 0xf7,
	0xfd, 0x08, 0xdf, 0x23, 0x30, 0xa0, 0x42, 0x67, 0x7a, 0x97, 0xc8, 0x4f, 0xa1, 0x05, 0x32, 0x99,
	0xf2, 0x29, 0x4c, 0x16, 0xa4, 0x67, 0x79, 0xfe, 0x54, 0x4e, 0x32, 0x52, 0x2b, 0xfa, 0xd8, 0x92,
	0xd2, 0x9c, 0xc3, 0x68, 0x41, 0xda, 0xa0, 0xbb, 0x0a, 0xc3, 0x21, 0xb0, 0x6c, 0x13, 0x79, 0xa7,
	0xde, 0x65, 0x7f, 0xc5, 0xb2, 0x0d, 0x7f, 0x81, 0xa0, 0xc6, 0x51, 0x52, 0x14, 0x8a, 0x5c, 0x12,
	0x22, 0xf4, 0x8a, 0xf5, 0x3b, 0x45, 0xcc, 0x20, 0xe6, 0x8c, 0x21, 0xf8, 0xeb, 0x37, 0x9d, 0x89,
	0x22, 0x3a, 0x32, 0x68, 0x75, 0xe3, 0xcf, 0x30, 0x5a, 0x6e, 0xbb, 0x43, 0xff, 0xe5, 0x77, 0x06,
	0x41, 0xcd, 0xaf, 0xfd, 0x81, 0xfc, 0x01, 0x82, 0xa5, 0x50, 0x4e, 0xea, 0x4f, 0x8a, 0xd7, 0x9a,
	0xc2, 0x1a, 0x29, 0xe7, 0x80, 0x75, 0x83, 0x3f, 0x62, 0x2e, 0xe0, 0x78, 0x4e, 0x39, 0x69, 0xea,
	0xee, 0x34, 0x84, 0x71, 0x93, 0x66, 0xed, 0x6e, 0xbe, 0x18, 0xf8, 0x16, 0xc2, 0x39, 0x0c, 0x9b,
	0x3b, 0xc3, 0x93, 0x44, 0xa6, 0x49, 0xeb, 0x1e, 0xe3, 0x49, 0x35, 0x6a, 0xda, 0x5d, 0x7b, 0x78,
	0x07, 0xfd, 0x3d, 0x8c, 0x63, 0x87, 0xd5, 0xa5, 0x2d, 0x95, 0xfb, 0x56, 0xad, 0xd2, 0x5d, 0x9a,
	0x55, 0x1e, 0x56, 0x7f, 0x0f, 0xf0, 0xdb, 0x14, 0x5a, 0x92, 0x5b, 0x7d, 0x1c, 0xba, 0x70, 0x25,
	0x9e, 0xc1, 0xa0, 0xde, 0x0c, 0x4e, 0x4b, 0x5e, 0x4b, 0xa5, 0x71, 0x74, 0x38, 0xb0, 0x16, 0x8f,
	0xfe, 0x6b, 0x2f, 0xb9, 0x92, 0x69, 0xea, 0x9b, 0x0f, 0x70, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x65, 0xdf, 0x8d, 0xf6, 0x10, 0x03, 0x00, 0x00,
}
