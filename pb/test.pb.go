// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	GetAllTestsRequest
	GetTestRequest
	GetTestResponse
	PutTestRequest
	PutTestResponse
	PostTestRequest
	PostTestResponse
	DeleteTestRequest
	DeleteTestResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetAllTestsRequest struct {
}

func (m *GetAllTestsRequest) Reset()                    { *m = GetAllTestsRequest{} }
func (m *GetAllTestsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllTestsRequest) ProtoMessage()               {}
func (*GetAllTestsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetTestRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetTestRequest) Reset()                    { *m = GetTestRequest{} }
func (m *GetTestRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTestRequest) ProtoMessage()               {}
func (*GetTestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetTestRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetTestResponse struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *GetTestResponse) Reset()                    { *m = GetTestResponse{} }
func (m *GetTestResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTestResponse) ProtoMessage()               {}
func (*GetTestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetTestResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetTestResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PutTestRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *PutTestRequest) Reset()                    { *m = PutTestRequest{} }
func (m *PutTestRequest) String() string            { return proto.CompactTextString(m) }
func (*PutTestRequest) ProtoMessage()               {}
func (*PutTestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PutTestRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PutTestResponse struct {
}

func (m *PutTestResponse) Reset()                    { *m = PutTestResponse{} }
func (m *PutTestResponse) String() string            { return proto.CompactTextString(m) }
func (*PutTestResponse) ProtoMessage()               {}
func (*PutTestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PostTestRequest struct {
}

func (m *PostTestRequest) Reset()                    { *m = PostTestRequest{} }
func (m *PostTestRequest) String() string            { return proto.CompactTextString(m) }
func (*PostTestRequest) ProtoMessage()               {}
func (*PostTestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PostTestResponse struct {
}

func (m *PostTestResponse) Reset()                    { *m = PostTestResponse{} }
func (m *PostTestResponse) String() string            { return proto.CompactTextString(m) }
func (*PostTestResponse) ProtoMessage()               {}
func (*PostTestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type DeleteTestRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteTestRequest) Reset()                    { *m = DeleteTestRequest{} }
func (m *DeleteTestRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTestRequest) ProtoMessage()               {}
func (*DeleteTestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteTestRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteTestResponse struct {
}

func (m *DeleteTestResponse) Reset()                    { *m = DeleteTestResponse{} }
func (m *DeleteTestResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteTestResponse) ProtoMessage()               {}
func (*DeleteTestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*GetAllTestsRequest)(nil), "pb.GetAllTestsRequest")
	proto.RegisterType((*GetTestRequest)(nil), "pb.GetTestRequest")
	proto.RegisterType((*GetTestResponse)(nil), "pb.GetTestResponse")
	proto.RegisterType((*PutTestRequest)(nil), "pb.PutTestRequest")
	proto.RegisterType((*PutTestResponse)(nil), "pb.PutTestResponse")
	proto.RegisterType((*PostTestRequest)(nil), "pb.PostTestRequest")
	proto.RegisterType((*PostTestResponse)(nil), "pb.PostTestResponse")
	proto.RegisterType((*DeleteTestRequest)(nil), "pb.DeleteTestRequest")
	proto.RegisterType((*DeleteTestResponse)(nil), "pb.DeleteTestResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Test service

type TestClient interface {
	GetAllTests(ctx context.Context, in *GetAllTestsRequest, opts ...grpc.CallOption) (Test_GetAllTestsClient, error)
	GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestResponse, error)
	PutTest(ctx context.Context, in *PutTestRequest, opts ...grpc.CallOption) (*PutTestResponse, error)
	PostTest(ctx context.Context, in *PostTestRequest, opts ...grpc.CallOption) (*PostTestResponse, error)
	DeleteTest(ctx context.Context, in *DeleteTestRequest, opts ...grpc.CallOption) (*DeleteTestResponse, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) GetAllTests(ctx context.Context, in *GetAllTestsRequest, opts ...grpc.CallOption) (Test_GetAllTestsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Test_serviceDesc.Streams[0], c.cc, "/pb.Test/GetAllTests", opts...)
	if err != nil {
		return nil, err
	}
	x := &testGetAllTestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Test_GetAllTestsClient interface {
	Recv() (*GetTestResponse, error)
	grpc.ClientStream
}

type testGetAllTestsClient struct {
	grpc.ClientStream
}

func (x *testGetAllTestsClient) Recv() (*GetTestResponse, error) {
	m := new(GetTestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestResponse, error) {
	out := new(GetTestResponse)
	err := grpc.Invoke(ctx, "/pb.Test/GetTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) PutTest(ctx context.Context, in *PutTestRequest, opts ...grpc.CallOption) (*PutTestResponse, error) {
	out := new(PutTestResponse)
	err := grpc.Invoke(ctx, "/pb.Test/PutTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) PostTest(ctx context.Context, in *PostTestRequest, opts ...grpc.CallOption) (*PostTestResponse, error) {
	out := new(PostTestResponse)
	err := grpc.Invoke(ctx, "/pb.Test/PostTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) DeleteTest(ctx context.Context, in *DeleteTestRequest, opts ...grpc.CallOption) (*DeleteTestResponse, error) {
	out := new(DeleteTestResponse)
	err := grpc.Invoke(ctx, "/pb.Test/DeleteTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Test service

type TestServer interface {
	GetAllTests(*GetAllTestsRequest, Test_GetAllTestsServer) error
	GetTest(context.Context, *GetTestRequest) (*GetTestResponse, error)
	PutTest(context.Context, *PutTestRequest) (*PutTestResponse, error)
	PostTest(context.Context, *PostTestRequest) (*PostTestResponse, error)
	DeleteTest(context.Context, *DeleteTestRequest) (*DeleteTestResponse, error)
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_GetAllTests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllTestsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).GetAllTests(m, &testGetAllTestsServer{stream})
}

type Test_GetAllTestsServer interface {
	Send(*GetTestResponse) error
	grpc.ServerStream
}

type testGetAllTestsServer struct {
	grpc.ServerStream
}

func (x *testGetAllTestsServer) Send(m *GetTestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Test_GetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).GetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Test/GetTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).GetTest(ctx, req.(*GetTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_PutTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).PutTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Test/PutTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).PutTest(ctx, req.(*PutTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_PostTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).PostTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Test/PostTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).PostTest(ctx, req.(*PostTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_DeleteTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).DeleteTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Test/DeleteTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).DeleteTest(ctx, req.(*DeleteTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTest",
			Handler:    _Test_GetTest_Handler,
		},
		{
			MethodName: "PutTest",
			Handler:    _Test_PutTest_Handler,
		},
		{
			MethodName: "PostTest",
			Handler:    _Test_PostTest_Handler,
		},
		{
			MethodName: "DeleteTest",
			Handler:    _Test_DeleteTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllTests",
			Handler:       _Test_GetAllTests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "test.proto",
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xc9, 0x12, 0xaa, 0x3e, 0xa1, 0xb5, 0x63, 0x2c, 0x25, 0xa7, 0x12, 0x2f, 0x9e, 0xa2,
	0x54, 0x7a, 0xd2, 0x8b, 0x22, 0xf4, 0x2a, 0xc5, 0x93, 0x37, 0x43, 0xe7, 0x50, 0x88, 0xcd, 0xea,
	0x4e, 0xff, 0x8f, 0x3f, 0x55, 0x36, 0xbb, 0xb6, 0xbb, 0x29, 0xe6, 0xb6, 0x7c, 0xbc, 0xef, 0xc1,
	0x3c, 0x16, 0x10, 0x36, 0x52, 0xea, 0xef, 0x46, 0x1a, 0x52, 0xba, 0x2a, 0x32, 0xd0, 0x92, 0xe5,
	0xa9, 0xae, 0xdf, 0xd8, 0x88, 0x59, 0xf1, 0xd7, 0x8e, 0x8d, 0x14, 0x33, 0x0c, 0x97, 0x2c, 0x16,
	0x79, 0x42, 0x43, 0xa8, 0xcd, 0x7a, 0x9a, 0xcc, 0x92, 0x9b, 0xb3, 0x95, 0xda, 0xac, 0x8b, 0x05,
	0x46, 0xfb, 0x84, 0xd1, 0xcd, 0xd6, 0x70, 0x37, 0x42, 0x84, 0x74, 0xfb, 0xf1, 0xc9, 0x53, 0xd5,
	0x92, 0xf6, 0x6d, 0x8b, 0x5f, 0x77, 0xbd, 0xc5, 0x63, 0x8c, 0xf6, 0x09, 0x57, 0xdc, 0xa2, 0xc6,
	0x84, 0x56, 0x41, 0xb8, 0x38, 0x20, 0x1f, 0xbb, 0xc6, 0xf8, 0x85, 0x6b, 0x16, 0xee, 0xab, 0xcf,
	0x40, 0x61, 0xc8, 0xa9, 0xf3, 0x1f, 0x85, 0xd4, 0x02, 0x7a, 0xc4, 0x79, 0x30, 0x07, 0x4d, 0x4a,
	0x5d, 0x95, 0xc7, 0xfb, 0xe4, 0x97, 0x9e, 0x87, 0x25, 0x77, 0x09, 0xcd, 0x71, 0xe2, 0x21, 0x51,
	0x94, 0xf8, 0xdf, 0xb2, 0x8e, 0xbf, 0xd7, 0x39, 0xf1, 0x3c, 0xce, 0xe9, 0x0c, 0x42, 0x0b, 0x9c,
	0xfe, 0x5d, 0x4f, 0x2e, 0x10, 0xcf, 0x93, 0x67, 0x31, 0xf4, 0xda, 0x03, 0x70, 0xb8, 0x9d, 0xae,
	0x6c, 0xe6, 0x68, 0xb0, 0x7c, 0xd2, 0xc5, 0x4e, 0x7e, 0x1e, 0xbc, 0xa7, 0xe5, 0xad, 0xae, 0xaa,
	0x41, 0xfb, 0x77, 0xee, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xb2, 0x27, 0x20, 0x49, 0x02,
	0x00, 0x00,
}
