// Code generated by protoc-gen-go. DO NOT EDIT.
// source: files.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FileInfo struct {
	FileType             string   `protobuf:"bytes,1,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{0}
}

func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileInfo.Unmarshal(m, b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return xxx_messageInfo_FileInfo.Size(m)
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetFileType() string {
	if m != nil {
		return m.FileType
	}
	return ""
}

type UploadFileRequest struct {
	// Types that are valid to be assigned to Data:
	//	*UploadFileRequest_Info
	//	*UploadFileRequest_ChunkData
	Data                 isUploadFileRequest_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *UploadFileRequest) Reset()         { *m = UploadFileRequest{} }
func (m *UploadFileRequest) String() string { return proto.CompactTextString(m) }
func (*UploadFileRequest) ProtoMessage()    {}
func (*UploadFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{1}
}

func (m *UploadFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadFileRequest.Unmarshal(m, b)
}
func (m *UploadFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadFileRequest.Marshal(b, m, deterministic)
}
func (m *UploadFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileRequest.Merge(m, src)
}
func (m *UploadFileRequest) XXX_Size() int {
	return xxx_messageInfo_UploadFileRequest.Size(m)
}
func (m *UploadFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileRequest proto.InternalMessageInfo

type isUploadFileRequest_Data interface {
	isUploadFileRequest_Data()
}

type UploadFileRequest_Info struct {
	Info *FileInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type UploadFileRequest_ChunkData struct {
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

func (*UploadFileRequest_Info) isUploadFileRequest_Data() {}

func (*UploadFileRequest_ChunkData) isUploadFileRequest_Data() {}

func (m *UploadFileRequest) GetData() isUploadFileRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UploadFileRequest) GetInfo() *FileInfo {
	if x, ok := m.GetData().(*UploadFileRequest_Info); ok {
		return x.Info
	}
	return nil
}

func (m *UploadFileRequest) GetChunkData() []byte {
	if x, ok := m.GetData().(*UploadFileRequest_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UploadFileRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UploadFileRequest_Info)(nil),
		(*UploadFileRequest_ChunkData)(nil),
	}
}

type UploadFileResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Size                 uint32   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadFileResponse) Reset()         { *m = UploadFileResponse{} }
func (m *UploadFileResponse) String() string { return proto.CompactTextString(m) }
func (*UploadFileResponse) ProtoMessage()    {}
func (*UploadFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{2}
}

func (m *UploadFileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadFileResponse.Unmarshal(m, b)
}
func (m *UploadFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadFileResponse.Marshal(b, m, deterministic)
}
func (m *UploadFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileResponse.Merge(m, src)
}
func (m *UploadFileResponse) XXX_Size() int {
	return xxx_messageInfo_UploadFileResponse.Size(m)
}
func (m *UploadFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileResponse proto.InternalMessageInfo

func (m *UploadFileResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UploadFileResponse) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type DownloadFileRequest struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadFileRequest) Reset()         { *m = DownloadFileRequest{} }
func (m *DownloadFileRequest) String() string { return proto.CompactTextString(m) }
func (*DownloadFileRequest) ProtoMessage()    {}
func (*DownloadFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{3}
}

func (m *DownloadFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadFileRequest.Unmarshal(m, b)
}
func (m *DownloadFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadFileRequest.Marshal(b, m, deterministic)
}
func (m *DownloadFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadFileRequest.Merge(m, src)
}
func (m *DownloadFileRequest) XXX_Size() int {
	return xxx_messageInfo_DownloadFileRequest.Size(m)
}
func (m *DownloadFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadFileRequest proto.InternalMessageInfo

func (m *DownloadFileRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type DownloadFileResponse struct {
	// Types that are valid to be assigned to Data:
	//	*DownloadFileResponse_Info
	//	*DownloadFileResponse_ChunkData
	Data                 isDownloadFileResponse_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DownloadFileResponse) Reset()         { *m = DownloadFileResponse{} }
func (m *DownloadFileResponse) String() string { return proto.CompactTextString(m) }
func (*DownloadFileResponse) ProtoMessage()    {}
func (*DownloadFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac8f32ecfdd343c, []int{4}
}

func (m *DownloadFileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadFileResponse.Unmarshal(m, b)
}
func (m *DownloadFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadFileResponse.Marshal(b, m, deterministic)
}
func (m *DownloadFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadFileResponse.Merge(m, src)
}
func (m *DownloadFileResponse) XXX_Size() int {
	return xxx_messageInfo_DownloadFileResponse.Size(m)
}
func (m *DownloadFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadFileResponse proto.InternalMessageInfo

type isDownloadFileResponse_Data interface {
	isDownloadFileResponse_Data()
}

type DownloadFileResponse_Info struct {
	Info *FileInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type DownloadFileResponse_ChunkData struct {
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

func (*DownloadFileResponse_Info) isDownloadFileResponse_Data() {}

func (*DownloadFileResponse_ChunkData) isDownloadFileResponse_Data() {}

func (m *DownloadFileResponse) GetData() isDownloadFileResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DownloadFileResponse) GetInfo() *FileInfo {
	if x, ok := m.GetData().(*DownloadFileResponse_Info); ok {
		return x.Info
	}
	return nil
}

func (m *DownloadFileResponse) GetChunkData() []byte {
	if x, ok := m.GetData().(*DownloadFileResponse_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DownloadFileResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DownloadFileResponse_Info)(nil),
		(*DownloadFileResponse_ChunkData)(nil),
	}
}

func init() {
	proto.RegisterType((*FileInfo)(nil), "pb.FileInfo")
	proto.RegisterType((*UploadFileRequest)(nil), "pb.UploadFileRequest")
	proto.RegisterType((*UploadFileResponse)(nil), "pb.UploadFileResponse")
	proto.RegisterType((*DownloadFileRequest)(nil), "pb.DownloadFileRequest")
	proto.RegisterType((*DownloadFileResponse)(nil), "pb.DownloadFileResponse")
}

func init() { proto.RegisterFile("files.proto", fileDescriptor_cac8f32ecfdd343c) }

var fileDescriptor_cac8f32ecfdd343c = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x3d, 0x4f, 0xc3, 0x30,
	0x14, 0x8c, 0xa3, 0x10, 0x35, 0xaf, 0x01, 0x89, 0xc7, 0x57, 0x14, 0x06, 0x2a, 0x2f, 0x64, 0x0a,
	0x50, 0x16, 0x36, 0xa4, 0xaa, 0xa0, 0xb2, 0x46, 0xb0, 0xb0, 0x14, 0xa7, 0x71, 0x84, 0x45, 0xb0,
	0x0d, 0x4e, 0x85, 0xca, 0x9f, 0xe0, 0x2f, 0x23, 0x9b, 0x56, 0xf4, 0x83, 0x91, 0xcd, 0xbe, 0xbb,
	0x77, 0xef, 0xce, 0x32, 0x74, 0x6b, 0xd1, 0x70, 0x93, 0xeb, 0x77, 0xd5, 0x2a, 0xf4, 0x75, 0x49,
	0x4f, 0xa1, 0x73, 0x2b, 0x1a, 0x7e, 0x27, 0x6b, 0x85, 0xc7, 0x10, 0x59, 0x7a, 0xdc, 0xce, 0x34,
	0x4f, 0x48, 0x8f, 0x64, 0x51, 0xd1, 0xb1, 0xc0, 0xfd, 0x4c, 0x73, 0xfa, 0x04, 0xbb, 0x0f, 0xba,
	0x51, 0xac, 0xb2, 0xf2, 0x82, 0xbf, 0x4d, 0xb9, 0x69, 0x91, 0x42, 0x20, 0x64, 0xad, 0x9c, 0xb8,
	0xdb, 0x8f, 0x73, 0x5d, 0xe6, 0x0b, 0xb7, 0x91, 0x57, 0x38, 0x0e, 0x4f, 0x00, 0x26, 0xcf, 0x53,
	0xf9, 0x32, 0xae, 0x58, 0xcb, 0x12, 0xbf, 0x47, 0xb2, 0x78, 0xe4, 0x15, 0x91, 0xc3, 0x86, 0xac,
	0x65, 0x83, 0x10, 0x02, 0x4b, 0xd1, 0x2b, 0xc0, 0xe5, 0x0d, 0x46, 0x2b, 0x69, 0x38, 0xee, 0x80,
	0x2f, 0xaa, 0x79, 0x1a, 0x5f, 0x54, 0x88, 0x10, 0x18, 0xf1, 0xc9, 0x9d, 0xd1, 0x76, 0xe1, 0xce,
	0xf4, 0x02, 0xf6, 0x86, 0xea, 0x43, 0xae, 0xa7, 0x4b, 0xc1, 0xc5, 0x97, 0xec, 0x75, 0xa5, 0x8e,
	0xbd, 0xd3, 0x09, 0xec, 0xaf, 0x8e, 0xcc, 0xd7, 0xfd, 0x67, 0xa3, 0xfe, 0x17, 0x81, 0x2d, 0x3b,
	0x6d, 0xf0, 0x1a, 0xe0, 0xb7, 0x1b, 0x1e, 0x58, 0xdb, 0x8d, 0xd7, 0x4c, 0x0f, 0xd7, 0xe1, 0x9f,
	0x4c, 0xd4, 0xcb, 0x08, 0xde, 0x40, 0xbc, 0x9c, 0x17, 0x8f, 0xac, 0xf6, 0x8f, 0xd2, 0x69, 0xb2,
	0x49, 0x2c, 0x6c, 0xce, 0xc9, 0x20, 0x7c, 0x0c, 0xf2, 0x33, 0x5d, 0x96, 0xa1, 0xfb, 0x01, 0x97,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x89, 0x09, 0xf6, 0xd0, 0x10, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FilesClient is the client API for Files service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilesClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (Files_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (Files_DownloadFileClient, error)
}

type filesClient struct {
	cc *grpc.ClientConn
}

func NewFilesClient(cc *grpc.ClientConn) FilesClient {
	return &filesClient{cc}
}

func (c *filesClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (Files_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Files_serviceDesc.Streams[0], "/pb.Files/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesUploadFileClient{stream}
	return x, nil
}

type Files_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type filesUploadFileClient struct {
	grpc.ClientStream
}

func (x *filesUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filesUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (Files_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Files_serviceDesc.Streams[1], "/pb.Files/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Files_DownloadFileClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type filesDownloadFileClient struct {
	grpc.ClientStream
}

func (x *filesDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FilesServer is the server API for Files service.
type FilesServer interface {
	UploadFile(Files_UploadFileServer) error
	DownloadFile(*DownloadFileRequest, Files_DownloadFileServer) error
}

// UnimplementedFilesServer can be embedded to have forward compatible implementations.
type UnimplementedFilesServer struct {
}

func (*UnimplementedFilesServer) UploadFile(srv Files_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (*UnimplementedFilesServer) DownloadFile(req *DownloadFileRequest, srv Files_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}

func RegisterFilesServer(s *grpc.Server, srv FilesServer) {
	s.RegisterService(&_Files_serviceDesc, srv)
}

func _Files_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesServer).UploadFile(&filesUploadFileServer{stream})
}

type Files_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type filesUploadFileServer struct {
	grpc.ServerStream
}

func (x *filesUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filesUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Files_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesServer).DownloadFile(m, &filesDownloadFileServer{stream})
}

type Files_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type filesDownloadFileServer struct {
	grpc.ServerStream
}

func (x *filesDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Files_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Files",
	HandlerType: (*FilesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _Files_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _Files_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "files.proto",
}
